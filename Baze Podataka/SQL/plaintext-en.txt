Keywords:

Creation:
CREATE TABLE %, creates a new table by name of %
the structure is: column_name data_type constrains
Types:
CHAR(%), fixed size string
VARCHAR(%), variable size string, ansii standard
VARCHAR2(%), oracle standard
INTEGER(%), int32
DATE, YYYY-MM-DD
TIME, 00:00:00
DATETIME(fsp), DATE + TIME formats
Constrains:
PRIMARY KEY, ensures NOT NULL and UNIQUE and is the indexer
NOT NULL, no cell can be empty
UNIQUE, every value has to be unique

Example of a table creation:
CREATE TABLE zaposljeni(
  id NUMBER(10) PRIMARY KEY,
  ime VARCHAR2(50) NOT NULL,
  prezime VARCHAR2(50) NOT NULL,
  plata NUMBER(10) NOT NULL,
  pol CHAR(1) NOT NULL,
  zaposljen DATE,
);

INSERT INTO %(%,...), inserts new entities into a table % and inserts into % columns
VALUES(%,...), defines which values to insert from an insert into statement
example:
INSERT INTO zaposljeni(id, ime, prezime, plata, pol, zaposljen)
VALUES (1, 'Lazar', 'Lazarevic', 900000, 'M', TO_DATE('08-03-2025','YYYY-MM-DD'))
INSERT INTO zaposljeni(id, ime, prezime, plata, pol, zaposljen)
VALUES (2, 'Jovan', 'Jovanovic', 800000, 'M', TO_DATE('08-03-2025','YYYY-MM-DD'))
INSERT INTO zaposljeni(id, ime, prezime, plata, pol, zaposljen)
VALUES (3, 'Mila', 'Milosavljevic', 700000, 'Z', TO_DATE('08-03-2025','YYYY-MM-DD'));

Queries:
SELECT %, chooses a columns to query from
FROM %, chooses a table from which to query columns defined in SELECT
*, is a wildcard which chooses everything available
AS, renames a column temporarily
Operators:
||, joins fields together and columns together as strings
; , end of query

Example:
SELECT ime,prezime,pol
FROM zaposljeni;

Example:
SELECT *
FROM zaposljeni;

Example:
SELECT ime || ' ' || prezime AS "Puno ime"
FROM zaposljeni;
-- this shows only 1 column names "Puno ime" with the format
-- of ime + ' ' + prezime

Grouping:
When grouping you should use aggregates (otherwise its useless)
When using aggregates your table must be grouped by something
GROUP BY %, the table gets grouped by %
and if you have GROUP BY in your query then
in your SELECT part you can do any aggregate for a column

Aggregates:
AVG(), average
COUNT(), number of 
MIN(), minimum
MAX(), maximum
SUM(), sum columns

Example:
SELECT SUM(plata), pol
FROM zaposljeni
GROUP BY pol

Filters:
WHERE %, filters the query columns by conditions in %
HAVING %, filters the query aggregations by conditions in %

Conditionals:
Conditionals can consist of keywords or relational operators
or even both

Relational operators:
!=, inequality
= , equal
> , greater than
< , less than
>=, greater than or equal
<=, less than or equal

Example:
SELECT ime, prezime, plata
FROM zaposljeni
WHERE plata >= 50000

Example:
SELECT pol, AVG(plata)
FROM zaposljeni
HAVING AVG(plata) < 100000

Keywords:
AND, shows only where both conditions are true
OR, where either condition is true
LIKE %, searches for a specific pattern aka regular expression
IN(), does value exist in set, example: WHERE id IN (1,3,5,7)
NOT, negates parameters, WHERE id NOT IN (2,4,6,8)
BETWEEN % AND %, creates a range between * >= % AND % <= *
IS, checks for set parameters of field like NULL or NOT NULL

For string matching with LIKE you need wildcards,
%, any characters or none
_, any single character

Example:
SELECT ime, prezime, plata
FROM zaposljeni
WHERE plata >= 30000 AND ime LIKE '_____' AND prezime LIKE 'L%';

Example:
SELECT ime, prezime, id, plata
FROM zaposljeni
WHERE plata BETWEEN 30000 AND 500000 OR id IN(1,2,5,8,10) AND date IS NOT NULL;

Example:
SELECT pol, AVG(plata)
FROM zaposljeni
HAVING AVG(plata) BETWEEN 30000 AND 500000;

Sorting:
ORDER BY %,%, sorts by % columns in % order
ASC, ascending
DESC, descending

Example:
SELECT ime, prezime, id, plata
FROM zaposljeni
WHERE plata BETWEEN 30000 AND 500000 OR id IN(1,2,5,8,10) AND date IS NOT NULL;
ORDER BY plata DESC
